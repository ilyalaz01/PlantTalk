{"ast":null,"code":"// src/services/api.js\n/**\r\n * Main API service for handling general API requests\r\n */\n\n// Base API URL - would be configured based on environment in real app\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://api.planttalk.app/v1';\n\n// Helper function for API requests\nconst fetchWithAuth = async (endpoint, options = {}) => {\n  // In a real app, this would include authentication headers\n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${localStorage.getItem('token')}`\n    }\n  };\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n    ...defaultOptions,\n    ...options\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || 'API request failed');\n  }\n  return response.json();\n};\n\n// Plant data API functions\nexport const fetchPlantData = async plantId => {\n  return fetchWithAuth(`/plants/${plantId}`);\n};\nexport const updatePlantData = async (plantId, data) => {\n  return fetchWithAuth(`/plants/${plantId}`, {\n    method: 'PATCH',\n    body: JSON.stringify(data)\n  });\n};\nexport const recordCareAction = async (plantId, action) => {\n  return fetchWithAuth(`/plants/${plantId}/care`, {\n    method: 'POST',\n    body: JSON.stringify({\n      action,\n      timestamp: new Date()\n    })\n  });\n};\nexport const uploadPlantPhoto = async (plantId, formData) => {\n  // Special case for file uploads - don't use JSON content type\n  return fetch(`${API_BASE_URL}/plants/${plantId}/photos`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${localStorage.getItem('token')}`\n    },\n    body: formData // FormData for file uploads\n  });\n};\n\n// User API functions\nexport const getUserProfile = async () => {\n  return fetchWithAuth('/user/profile');\n};\nexport const updateUserPreferences = async preferences => {\n  return fetchWithAuth('/user/preferences', {\n    method: 'PATCH',\n    body: JSON.stringify(preferences)\n  });\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","fetchWithAuth","endpoint","options","defaultOptions","headers","localStorage","getItem","response","fetch","ok","error","json","Error","message","fetchPlantData","plantId","updatePlantData","data","method","body","JSON","stringify","recordCareAction","action","timestamp","Date","uploadPlantPhoto","formData","getUserProfile","updateUserPreferences","preferences"],"sources":["C:/Users/ilyal/OneDrive/Рабочий стол/בראודה/סמסטר 8/אקולוגיה/PlantTalk/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\n/**\r\n * Main API service for handling general API requests\r\n */\r\n\r\n// Base API URL - would be configured based on environment in real app\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://api.planttalk.app/v1';\r\n\r\n// Helper function for API requests\r\nconst fetchWithAuth = async (endpoint, options = {}) => {\r\n  // In a real app, this would include authentication headers\r\n  const defaultOptions = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n    },\r\n  };\r\n  \r\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n    ...defaultOptions,\r\n    ...options,\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.message || 'API request failed');\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\n// Plant data API functions\r\nexport const fetchPlantData = async (plantId) => {\r\n  return fetchWithAuth(`/plants/${plantId}`);\r\n};\r\n\r\nexport const updatePlantData = async (plantId, data) => {\r\n  return fetchWithAuth(`/plants/${plantId}`, {\r\n    method: 'PATCH',\r\n    body: JSON.stringify(data),\r\n  });\r\n};\r\n\r\nexport const recordCareAction = async (plantId, action) => {\r\n  return fetchWithAuth(`/plants/${plantId}/care`, {\r\n    method: 'POST',\r\n    body: JSON.stringify({ action, timestamp: new Date() }),\r\n  });\r\n};\r\n\r\nexport const uploadPlantPhoto = async (plantId, formData) => {\r\n  // Special case for file uploads - don't use JSON content type\r\n  return fetch(`${API_BASE_URL}/plants/${plantId}/photos`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n    },\r\n    body: formData, // FormData for file uploads\r\n  });\r\n};\r\n\r\n// User API functions\r\nexport const getUserProfile = async () => {\r\n  return fetchWithAuth('/user/profile');\r\n};\r\n\r\nexport const updateUserPreferences = async (preferences) => {\r\n  return fetchWithAuth('/user/preferences', {\r\n    method: 'PATCH',\r\n    body: JSON.stringify(preferences),\r\n  });\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,8BAA8B;;AAEpF;AACA,MAAMC,aAAa,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACtD;EACA,MAAMC,cAAc,GAAG;IACrBC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC1D;EACF,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGZ,YAAY,GAAGK,QAAQ,EAAE,EAAE;IACzD,GAAGE,cAAc;IACjB,GAAGD;EACL,CAAC,CAAC;EAEF,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,OAAO,IAAI,oBAAoB,CAAC;EACxD;EAEA,OAAON,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAG,MAAOC,OAAO,IAAK;EAC/C,OAAOf,aAAa,CAAC,WAAWe,OAAO,EAAE,CAAC;AAC5C,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOD,OAAO,EAAEE,IAAI,KAAK;EACtD,OAAOjB,aAAa,CAAC,WAAWe,OAAO,EAAE,EAAE;IACzCG,MAAM,EAAE,OAAO;IACfC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI;EAC3B,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMK,gBAAgB,GAAG,MAAAA,CAAOP,OAAO,EAAEQ,MAAM,KAAK;EACzD,OAAOvB,aAAa,CAAC,WAAWe,OAAO,OAAO,EAAE;IAC9CG,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEE,MAAM;MAAEC,SAAS,EAAE,IAAIC,IAAI,CAAC;IAAE,CAAC;EACxD,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOX,OAAO,EAAEY,QAAQ,KAAK;EAC3D;EACA,OAAOnB,KAAK,CAAC,GAAGZ,YAAY,WAAWmB,OAAO,SAAS,EAAE;IACvDG,MAAM,EAAE,MAAM;IACdd,OAAO,EAAE;MACP,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC1D,CAAC;IACDa,IAAI,EAAEQ,QAAQ,CAAE;EAClB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,OAAO5B,aAAa,CAAC,eAAe,CAAC;AACvC,CAAC;AAED,OAAO,MAAM6B,qBAAqB,GAAG,MAAOC,WAAW,IAAK;EAC1D,OAAO9B,aAAa,CAAC,mBAAmB,EAAE;IACxCkB,MAAM,EAAE,OAAO;IACfC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,WAAW;EAClC,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}