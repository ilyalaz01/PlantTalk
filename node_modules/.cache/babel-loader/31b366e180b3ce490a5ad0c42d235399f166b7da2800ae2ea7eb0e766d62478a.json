{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilyal\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\\\u05D1\\u05E8\\u05D0\\u05D5\\u05D3\\u05D4\\\\\\u05E1\\u05DE\\u05E1\\u05D8\\u05E8 8\\\\\\u05D0\\u05E7\\u05D5\\u05DC\\u05D5\\u05D2\\u05D9\\u05D4\\\\PlantTalk\\\\src\\\\pages\\\\ChatPage.js\",\n  _s = $RefreshSig$();\n// src/pages/ChatPage.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport ChatBubble from '../components/chat/ChatBubble';\nimport ChatInput from '../components/chat/ChatInput';\nimport SuggestedQuestions from '../components/chat/SuggestedQuestions';\nimport { usePlant } from '../contexts/PlantContext';\nimport { useSensor } from '../contexts/SensorContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: ${({\n  theme\n}) => theme.spacing.xl};\n`;\n_c = ChatContainer;\nconst ChatTitle = styled.h2`\n  text-align: center;\n  color: ${({\n  theme\n}) => theme.colors.text.primary};\n  margin-bottom: ${({\n  theme\n}) => theme.spacing.lg};\n`;\n_c2 = ChatTitle;\nconst ChatWindow = styled.div`\n  background-color: ${({\n  theme\n}) => theme.colors.background};\n  border-radius: ${({\n  theme\n}) => theme.borderRadius.lg};\n  padding: ${({\n  theme\n}) => theme.spacing.lg};\n  box-shadow: ${({\n  theme\n}) => theme.shadows.md};\n  max-height: 500px;\n  overflow-y: auto;\n  margin-bottom: ${({\n  theme\n}) => theme.spacing.md};\n  \n  /* Custom scrollbar for better usability */\n  scrollbar-width: thin;\n  scrollbar-color: ${({\n  theme\n}) => theme.colors.primary} ${({\n  theme\n}) => theme.colors.background};\n  \n  &::-webkit-scrollbar {\n    width: 8px;\n  }\n  \n  &::-webkit-scrollbar-track {\n    background: ${({\n  theme\n}) => theme.colors.background};\n  }\n  \n  &::-webkit-scrollbar-thumb {\n    background-color: ${({\n  theme\n}) => theme.colors.primary};\n    border-radius: 20px;\n    border: 2px solid ${({\n  theme\n}) => theme.colors.background};\n  }\n`;\n_c3 = ChatWindow;\nconst EmptyChat = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 200px;\n  color: ${({\n  theme\n}) => theme.colors.text.secondary};\n  font-size: ${({\n  theme\n}) => theme.typography.fontSize.md};\n  text-align: center;\n`;\n_c4 = EmptyChat;\nconst EmptyIcon = styled.div`\n  font-size: 48px;\n  margin-bottom: ${({\n  theme\n}) => theme.spacing.md};\n`;\n\n// Function to generate plant responses based on questions\n_c5 = EmptyIcon;\nconst generatePlantResponse = (question, plantData, sensorData) => {\n  // Convert question to lowercase for easier matching\n  const q = question.toLowerCase();\n\n  // Check for water-related questions\n  if (q.includes('water') || q.includes('thirsty') || q.includes('dry')) {\n    if (sensorData.soilMoisture < 30) {\n      return `Yes, I'm quite thirsty! My soil moisture is at ${sensorData.soilMoisture}%. I'd love some water right now.`;\n    } else if (sensorData.soilMoisture > 70) {\n      return `I have plenty of water right now! My soil moisture is at ${sensorData.soilMoisture}%. No need to water me for a few days.`;\n    } else {\n      return `I should be watered when my soil moisture drops below 30%. Right now I'm at ${sensorData.soilMoisture}%, so I'm doing fine!`;\n    }\n  }\n\n  // Check for temperature-related questions\n  if (q.includes('temperature') || q.includes('hot') || q.includes('cold') || q.includes('warm')) {\n    if (sensorData.temperature < 65) {\n      return `It's a bit chilly for me at ${sensorData.temperature}°F. I prefer temperatures between 65°F and 75°F. Maybe move me away from drafty windows?`;\n    } else if (sensorData.temperature > 75) {\n      return `It's getting warm for me at ${sensorData.temperature}°F. I prefer temperatures between 65°F and 75°F. Could you move me somewhere cooler or away from direct heat?`;\n    } else {\n      return `The current temperature of ${sensorData.temperature}°F is perfect for me! I thrive in temperatures between 65°F and 75°F.`;\n    }\n  }\n\n  // Check for light-related questions\n  if (q.includes('light') || q.includes('sun') || q.includes('bright') || q.includes('dark')) {\n    if (sensorData.light < 30) {\n      return `I could use more light! My current light level is only ${sensorData.light}%. As a ${plantData.species}, I prefer bright, indirect sunlight.`;\n    } else if (sensorData.light > 80) {\n      return `I might be getting a bit too much direct sunlight at ${sensorData.light}%. As a ${plantData.species}, I prefer bright, indirect light rather than harsh direct sun.`;\n    } else {\n      return `My current light level of ${sensorData.light}% is great! As a ${plantData.species}, I enjoy bright, indirect sunlight.`;\n    }\n  }\n\n  // Check for health-related questions\n  if (q.includes('healthy') || q.includes('health') || q.includes('doing')) {\n    switch (plantData.status) {\n      case 'thirsty':\n        return `I'm a bit thirsty right now, but otherwise doing fine! My soil moisture is at ${sensorData.soilMoisture}%, which is getting low.`;\n      case 'cold':\n        return `I'm feeling cold at ${sensorData.temperature}°F. I'd be healthier if you could move me to a warmer spot.`;\n      case 'hot':\n        return `I'm feeling a bit too warm at ${sensorData.temperature}°F. I'd be healthier in a cooler location.`;\n      default:\n        return `I'm feeling great! All my vital signs are in the optimal range. Thanks for taking such good care of me!`;\n    }\n  }\n\n  // Default response if no specific category is matched\n  const defaultResponses = [`As a ${plantData.species}, I'm happiest with regular watering when my soil gets dry, bright indirect light, and temperatures between 65-75°F.`, `I've been with you for ${plantData.age} now. Thanks for taking care of me!`, `Plants like me communicate through our appearance and growing habits. Thanks for checking in with me!`, `I don't quite understand that question, but I can tell you that my soil moisture is ${sensorData.soilMoisture}%, the temperature is ${sensorData.temperature}°F, and the humidity is ${sensorData.humidity}%.`];\n\n  // Return a random default response\n  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n};\nconst ChatPage = () => {\n  _s();\n  const {\n    plant\n  } = usePlant();\n  const {\n    sensorData\n  } = useSensor();\n  const [messages, setMessages] = useState([]);\n  const [isPlantTyping, setIsPlantTyping] = useState(false);\n  const chatWindowRef = useRef(null);\n\n  // Initial greeting when chat page loads\n  useEffect(() => {\n    if (messages.length === 0) {\n      const initialGreeting = {\n        id: 1,\n        sender: 'plant',\n        text: `Hi there! I'm ${plant.name}, your ${plant.species}. How can I help you today?`,\n        timestamp: new Date()\n      };\n      setMessages([initialGreeting]);\n    }\n  }, []);\n\n  // Auto-scroll to bottom of chat when new messages are added\n  useEffect(() => {\n    if (chatWindowRef.current) {\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Handle sending a new message\n  const handleSendMessage = text => {\n    // Add user message\n    const userMessage = {\n      id: messages.length + 1,\n      sender: 'user',\n      text,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // Simulate plant typing\n    setIsPlantTyping(true);\n\n    // Generate plant response after a short delay to simulate thinking\n    setTimeout(() => {\n      const responseText = generatePlantResponse(text, plant, sensorData);\n      const plantResponse = {\n        id: messages.length + 2,\n        sender: 'plant',\n        text: responseText,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, plantResponse]);\n      setIsPlantTyping(false);\n    }, 1500 + Math.random() * 1000); // Random delay between 1.5-2.5 seconds\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ChatTitle, {\n      children: [\"Chat with \", plant.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      ref: chatWindowRef,\n      children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n        children: [/*#__PURE__*/_jsxDEV(EmptyIcon, {\n          children: \"\\uD83D\\uDCAC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No messages yet. Start a conversation with your plant!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this) : messages.map(message => /*#__PURE__*/_jsxDEV(ChatBubble, {\n        message: message,\n        isPlant: message.sender === 'plant'\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this)), isPlantTyping && /*#__PURE__*/_jsxDEV(ChatBubble, {\n        message: {\n          text: '...',\n          timestamp: new Date()\n        },\n        isPlant: true,\n        isTyping: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SuggestedQuestions, {\n      onSelectQuestion: handleSendMessage,\n      isPlantTyping: isPlantTyping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSendMessage: handleSendMessage,\n      isPlantTyping: isPlantTyping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatPage, \"nf8e1X13+3I0a7sE0w19S3FSm5M=\", false, function () {\n  return [usePlant, useSensor];\n});\n_c6 = ChatPage;\nexport default ChatPage;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"ChatContainer\");\n$RefreshReg$(_c2, \"ChatTitle\");\n$RefreshReg$(_c3, \"ChatWindow\");\n$RefreshReg$(_c4, \"EmptyChat\");\n$RefreshReg$(_c5, \"EmptyIcon\");\n$RefreshReg$(_c6, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","ChatBubble","ChatInput","SuggestedQuestions","usePlant","useSensor","jsxDEV","_jsxDEV","ChatContainer","div","theme","spacing","xl","_c","ChatTitle","h2","colors","text","primary","lg","_c2","ChatWindow","background","borderRadius","shadows","md","_c3","EmptyChat","secondary","typography","fontSize","_c4","EmptyIcon","_c5","generatePlantResponse","question","plantData","sensorData","q","toLowerCase","includes","soilMoisture","temperature","light","species","status","defaultResponses","age","humidity","Math","floor","random","length","ChatPage","_s","plant","messages","setMessages","isPlantTyping","setIsPlantTyping","chatWindowRef","initialGreeting","id","sender","name","timestamp","Date","current","scrollTop","scrollHeight","handleSendMessage","userMessage","prev","setTimeout","responseText","plantResponse","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","message","isPlant","isTyping","onSelectQuestion","onSendMessage","_c6","$RefreshReg$"],"sources":["C:/Users/ilyal/OneDrive/Рабочий стол/בראודה/סמסטר 8/אקולוגיה/PlantTalk/src/pages/ChatPage.js"],"sourcesContent":["// src/pages/ChatPage.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport ChatBubble from '../components/chat/ChatBubble';\r\nimport ChatInput from '../components/chat/ChatInput';\r\nimport SuggestedQuestions from '../components/chat/SuggestedQuestions';\r\nimport { usePlant } from '../contexts/PlantContext';\r\nimport { useSensor } from '../contexts/SensorContext';\r\n\r\nconst ChatContainer = styled.div`\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: ${({ theme }) => theme.spacing.xl};\r\n`;\r\n\r\nconst ChatTitle = styled.h2`\r\n  text-align: center;\r\n  color: ${({ theme }) => theme.colors.text.primary};\r\n  margin-bottom: ${({ theme }) => theme.spacing.lg};\r\n`;\r\n\r\nconst ChatWindow = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  border-radius: ${({ theme }) => theme.borderRadius.lg};\r\n  padding: ${({ theme }) => theme.spacing.lg};\r\n  box-shadow: ${({ theme }) => theme.shadows.md};\r\n  max-height: 500px;\r\n  overflow-y: auto;\r\n  margin-bottom: ${({ theme }) => theme.spacing.md};\r\n  \r\n  /* Custom scrollbar for better usability */\r\n  scrollbar-width: thin;\r\n  scrollbar-color: ${({ theme }) => theme.colors.primary} ${({ theme }) => theme.colors.background};\r\n  \r\n  &::-webkit-scrollbar {\r\n    width: 8px;\r\n  }\r\n  \r\n  &::-webkit-scrollbar-track {\r\n    background: ${({ theme }) => theme.colors.background};\r\n  }\r\n  \r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: ${({ theme }) => theme.colors.primary};\r\n    border-radius: 20px;\r\n    border: 2px solid ${({ theme }) => theme.colors.background};\r\n  }\r\n`;\r\n\r\nconst EmptyChat = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 200px;\r\n  color: ${({ theme }) => theme.colors.text.secondary};\r\n  font-size: ${({ theme }) => theme.typography.fontSize.md};\r\n  text-align: center;\r\n`;\r\n\r\nconst EmptyIcon = styled.div`\r\n  font-size: 48px;\r\n  margin-bottom: ${({ theme }) => theme.spacing.md};\r\n`;\r\n\r\n// Function to generate plant responses based on questions\r\nconst generatePlantResponse = (question, plantData, sensorData) => {\r\n  // Convert question to lowercase for easier matching\r\n  const q = question.toLowerCase();\r\n  \r\n  // Check for water-related questions\r\n  if (q.includes('water') || q.includes('thirsty') || q.includes('dry')) {\r\n    if (sensorData.soilMoisture < 30) {\r\n      return `Yes, I'm quite thirsty! My soil moisture is at ${sensorData.soilMoisture}%. I'd love some water right now.`;\r\n    } else if (sensorData.soilMoisture > 70) {\r\n      return `I have plenty of water right now! My soil moisture is at ${sensorData.soilMoisture}%. No need to water me for a few days.`;\r\n    } else {\r\n      return `I should be watered when my soil moisture drops below 30%. Right now I'm at ${sensorData.soilMoisture}%, so I'm doing fine!`;\r\n    }\r\n  }\r\n  \r\n  // Check for temperature-related questions\r\n  if (q.includes('temperature') || q.includes('hot') || q.includes('cold') || q.includes('warm')) {\r\n    if (sensorData.temperature < 65) {\r\n      return `It's a bit chilly for me at ${sensorData.temperature}°F. I prefer temperatures between 65°F and 75°F. Maybe move me away from drafty windows?`;\r\n    } else if (sensorData.temperature > 75) {\r\n      return `It's getting warm for me at ${sensorData.temperature}°F. I prefer temperatures between 65°F and 75°F. Could you move me somewhere cooler or away from direct heat?`;\r\n    } else {\r\n      return `The current temperature of ${sensorData.temperature}°F is perfect for me! I thrive in temperatures between 65°F and 75°F.`;\r\n    }\r\n  }\r\n  \r\n  // Check for light-related questions\r\n  if (q.includes('light') || q.includes('sun') || q.includes('bright') || q.includes('dark')) {\r\n    if (sensorData.light < 30) {\r\n      return `I could use more light! My current light level is only ${sensorData.light}%. As a ${plantData.species}, I prefer bright, indirect sunlight.`;\r\n    } else if (sensorData.light > 80) {\r\n      return `I might be getting a bit too much direct sunlight at ${sensorData.light}%. As a ${plantData.species}, I prefer bright, indirect light rather than harsh direct sun.`;\r\n    } else {\r\n      return `My current light level of ${sensorData.light}% is great! As a ${plantData.species}, I enjoy bright, indirect sunlight.`;\r\n    }\r\n  }\r\n  \r\n  // Check for health-related questions\r\n  if (q.includes('healthy') || q.includes('health') || q.includes('doing')) {\r\n    switch (plantData.status) {\r\n      case 'thirsty':\r\n        return `I'm a bit thirsty right now, but otherwise doing fine! My soil moisture is at ${sensorData.soilMoisture}%, which is getting low.`;\r\n      case 'cold':\r\n        return `I'm feeling cold at ${sensorData.temperature}°F. I'd be healthier if you could move me to a warmer spot.`;\r\n      case 'hot':\r\n        return `I'm feeling a bit too warm at ${sensorData.temperature}°F. I'd be healthier in a cooler location.`;\r\n      default:\r\n        return `I'm feeling great! All my vital signs are in the optimal range. Thanks for taking such good care of me!`;\r\n    }\r\n  }\r\n  \r\n  // Default response if no specific category is matched\r\n  const defaultResponses = [\r\n    `As a ${plantData.species}, I'm happiest with regular watering when my soil gets dry, bright indirect light, and temperatures between 65-75°F.`,\r\n    `I've been with you for ${plantData.age} now. Thanks for taking care of me!`,\r\n    `Plants like me communicate through our appearance and growing habits. Thanks for checking in with me!`,\r\n    `I don't quite understand that question, but I can tell you that my soil moisture is ${sensorData.soilMoisture}%, the temperature is ${sensorData.temperature}°F, and the humidity is ${sensorData.humidity}%.`\r\n  ];\r\n  \r\n  // Return a random default response\r\n  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\r\n};\r\n\r\nconst ChatPage = () => {\r\n  const { plant } = usePlant();\r\n  const { sensorData } = useSensor();\r\n  const [messages, setMessages] = useState([]);\r\n  const [isPlantTyping, setIsPlantTyping] = useState(false);\r\n  const chatWindowRef = useRef(null);\r\n  \r\n  // Initial greeting when chat page loads\r\n  useEffect(() => {\r\n    if (messages.length === 0) {\r\n      const initialGreeting = {\r\n        id: 1,\r\n        sender: 'plant',\r\n        text: `Hi there! I'm ${plant.name}, your ${plant.species}. How can I help you today?`,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      setMessages([initialGreeting]);\r\n    }\r\n  }, []);\r\n  \r\n  // Auto-scroll to bottom of chat when new messages are added\r\n  useEffect(() => {\r\n    if (chatWindowRef.current) {\r\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n  \r\n  // Handle sending a new message\r\n  const handleSendMessage = (text) => {\r\n    // Add user message\r\n    const userMessage = {\r\n      id: messages.length + 1,\r\n      sender: 'user',\r\n      text,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    \r\n    // Simulate plant typing\r\n    setIsPlantTyping(true);\r\n    \r\n    // Generate plant response after a short delay to simulate thinking\r\n    setTimeout(() => {\r\n      const responseText = generatePlantResponse(text, plant, sensorData);\r\n      \r\n      const plantResponse = {\r\n        id: messages.length + 2,\r\n        sender: 'plant',\r\n        text: responseText,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      setMessages(prev => [...prev, plantResponse]);\r\n      setIsPlantTyping(false);\r\n    }, 1500 + Math.random() * 1000); // Random delay between 1.5-2.5 seconds\r\n  };\r\n  \r\n  return (\r\n    <ChatContainer>\r\n      <ChatTitle>Chat with {plant.name}</ChatTitle>\r\n      \r\n      <ChatWindow ref={chatWindowRef}>\r\n        {messages.length === 0 ? (\r\n          <EmptyChat>\r\n            <EmptyIcon>💬</EmptyIcon>\r\n            <p>No messages yet. Start a conversation with your plant!</p>\r\n          </EmptyChat>\r\n        ) : (\r\n          messages.map(message => (\r\n            <ChatBubble\r\n              key={message.id}\r\n              message={message}\r\n              isPlant={message.sender === 'plant'}\r\n            />\r\n          ))\r\n        )}\r\n        \r\n        {isPlantTyping && (\r\n          <ChatBubble\r\n            message={{ text: '...', timestamp: new Date() }}\r\n            isPlant={true}\r\n            isTyping={true}\r\n          />\r\n        )}\r\n      </ChatWindow>\r\n      \r\n      <SuggestedQuestions \r\n        onSelectQuestion={handleSendMessage}\r\n        isPlantTyping={isPlantTyping}\r\n      />\r\n      \r\n      <ChatInput \r\n        onSendMessage={handleSendMessage}\r\n        isPlantTyping={isPlantTyping}\r\n      />\r\n    </ChatContainer>\r\n  );\r\n};\r\n\r\nexport default ChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}