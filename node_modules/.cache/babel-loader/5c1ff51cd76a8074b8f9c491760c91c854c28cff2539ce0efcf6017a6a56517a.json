{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilyal\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\\\u05D1\\u05E8\\u05D0\\u05D5\\u05D3\\u05D4\\\\\\u05E1\\u05DE\\u05E1\\u05D8\\u05E8 8\\\\\\u05D0\\u05E7\\u05D5\\u05DC\\u05D5\\u05D2\\u05D9\\u05D4\\\\PlantTalk\\\\src\\\\contexts\\\\PlantContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/PlantContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { fetchPlantData } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlantContext = /*#__PURE__*/createContext();\nexport const usePlant = () => {\n  _s();\n  const context = useContext(PlantContext);\n  if (!context) {\n    throw new Error('usePlant must be used within a PlantProvider');\n  }\n  return context;\n};\n_s(usePlant, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const PlantProvider = ({\n  children\n}) => {\n  _s2();\n  const [plant, setPlant] = useState({\n    id: 1,\n    name: 'Fern Friend',\n    species: 'Boston Fern',\n    age: '3 months',\n    status: 'healthy',\n    // healthy, thirsty, cold, hot, etc.\n    lastWatered: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n    // 2 days ago\n    careSchedule: {\n      watering: 'every 3 days',\n      sunlight: 'indirect light',\n      optimalTemperature: '65-75°F',\n      optimalHumidity: '50-60%'\n    },\n    streak: 7,\n    // Days in a row with proper care\n    photos: [{\n      id: 1,\n      url: '/assets/images/plant-week1.jpg',\n      date: new Date(Date.now() - 21 * 24 * 60 * 60 * 1000),\n      note: 'First day home!'\n    }, {\n      id: 2,\n      url: '/assets/images/plant-week2.jpg',\n      date: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),\n      note: 'Growing nicely'\n    }, {\n      id: 3,\n      url: '/assets/images/plant-week3.jpg',\n      date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n      note: 'New leaves!'\n    }],\n    careHistory: [{\n      action: 'watered',\n      date: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000)\n    }, {\n      action: 'misted',\n      date: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000)\n    }, {\n      action: 'watered',\n      date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)\n    }, {\n      action: 'fertilized',\n      date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)\n    }]\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Function to fetch plant data from API\n  const refreshPlantData = async () => {\n    try {\n      setLoading(true);\n      // In a real application, this would fetch from an API\n      // const data = await fetchPlantData(plant.id);\n      // setPlant(data);\n\n      // For now, just simulate a delay\n      setTimeout(() => {\n        setLoading(false);\n      }, 500);\n    } catch (err) {\n      setError('Could not fetch plant data');\n      setLoading(false);\n    }\n  };\n\n  // Function to update plant status based on sensor data\n  const updatePlantStatus = sensorData => {\n    let newStatus = 'healthy';\n    if (sensorData.soilMoisture < 30) {\n      newStatus = 'thirsty';\n    } else if (sensorData.temperature < 60) {\n      newStatus = 'cold';\n    } else if (sensorData.temperature > 80) {\n      newStatus = 'hot';\n    } else if (sensorData.humidity < 40) {\n      newStatus = 'dry';\n    }\n    setPlant(prev => ({\n      ...prev,\n      status: newStatus\n    }));\n  };\n\n  // Function to record plant care actions\n  const recordCareAction = action => {\n    const now = new Date();\n    setPlant(prev => ({\n      ...prev,\n      lastWatered: action === 'watered' ? now : prev.lastWatered,\n      streak: prev.streak + 1,\n      careHistory: [{\n        action,\n        date: now\n      }, ...prev.careHistory]\n    }));\n  };\n\n  // Function to add a new plant photo\n  const addPlantPhoto = (photoUrl, note = '') => {\n    const newPhoto = {\n      id: plant.photos.length + 1,\n      url: photoUrl,\n      date: new Date(),\n      note\n    };\n    setPlant(prev => ({\n      ...prev,\n      photos: [newPhoto, ...prev.photos]\n    }));\n  };\n  useEffect(() => {\n    refreshPlantData();\n\n    // Set up a refresh interval - in a real app, this might\n    // poll for updated sensor data\n    const interval = setInterval(() => {\n      refreshPlantData();\n    }, 60000); // Refresh every minute\n\n    return () => clearInterval(interval);\n  }, []);\n  const value = {\n    plant,\n    loading,\n    error,\n    updatePlantStatus,\n    recordCareAction,\n    addPlantPhoto,\n    refreshPlantData\n  };\n  return /*#__PURE__*/_jsxDEV(PlantContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 10\n  }, this);\n};\n_s2(PlantProvider, \"B2rb9OUlEUxYQx4IkCP9Ec5Hqpw=\");\n_c = PlantProvider;\nvar _c;\n$RefreshReg$(_c, \"PlantProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","fetchPlantData","jsxDEV","_jsxDEV","PlantContext","usePlant","_s","context","Error","PlantProvider","children","_s2","plant","setPlant","id","name","species","age","status","lastWatered","Date","now","careSchedule","watering","sunlight","optimalTemperature","optimalHumidity","streak","photos","url","date","note","careHistory","action","loading","setLoading","error","setError","refreshPlantData","setTimeout","err","updatePlantStatus","sensorData","newStatus","soilMoisture","temperature","humidity","prev","recordCareAction","addPlantPhoto","photoUrl","newPhoto","length","interval","setInterval","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ilyal/OneDrive/Рабочий стол/בראודה/סמסטר 8/אקולוגיה/PlantTalk/src/contexts/PlantContext.js"],"sourcesContent":["// src/contexts/PlantContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { fetchPlantData } from '../services/api';\r\n\r\nconst PlantContext = createContext();\r\n\r\nexport const usePlant = () => {\r\n  const context = useContext(PlantContext);\r\n  if (!context) {\r\n    throw new Error('usePlant must be used within a PlantProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const PlantProvider = ({ children }) => {\r\n  const [plant, setPlant] = useState({\r\n    id: 1,\r\n    name: 'Fern Friend',\r\n    species: 'Boston Fern',\r\n    age: '3 months',\r\n    status: 'healthy', // healthy, thirsty, cold, hot, etc.\r\n    lastWatered: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\r\n    careSchedule: {\r\n      watering: 'every 3 days',\r\n      sunlight: 'indirect light',\r\n      optimalTemperature: '65-75°F',\r\n      optimalHumidity: '50-60%',\r\n    },\r\n    streak: 7, // Days in a row with proper care\r\n    photos: [\r\n      {\r\n        id: 1,\r\n        url: '/assets/images/plant-week1.jpg',\r\n        date: new Date(Date.now() - 21 * 24 * 60 * 60 * 1000),\r\n        note: 'First day home!',\r\n      },\r\n      {\r\n        id: 2,\r\n        url: '/assets/images/plant-week2.jpg',\r\n        date: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),\r\n        note: 'Growing nicely',\r\n      },\r\n      {\r\n        id: 3,\r\n        url: '/assets/images/plant-week3.jpg',\r\n        date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\r\n        note: 'New leaves!',\r\n      },\r\n    ],\r\n    careHistory: [\r\n      { action: 'watered', date: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000) },\r\n      { action: 'misted', date: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000) },\r\n      { action: 'watered', date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000) },\r\n      { action: 'fertilized', date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) },\r\n    ],\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Function to fetch plant data from API\r\n  const refreshPlantData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      // In a real application, this would fetch from an API\r\n      // const data = await fetchPlantData(plant.id);\r\n      // setPlant(data);\r\n      \r\n      // For now, just simulate a delay\r\n      setTimeout(() => {\r\n        setLoading(false);\r\n      }, 500);\r\n    } catch (err) {\r\n      setError('Could not fetch plant data');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to update plant status based on sensor data\r\n  const updatePlantStatus = (sensorData) => {\r\n    let newStatus = 'healthy';\r\n    \r\n    if (sensorData.soilMoisture < 30) {\r\n      newStatus = 'thirsty';\r\n    } else if (sensorData.temperature < 60) {\r\n      newStatus = 'cold';\r\n    } else if (sensorData.temperature > 80) {\r\n      newStatus = 'hot';\r\n    } else if (sensorData.humidity < 40) {\r\n      newStatus = 'dry';\r\n    }\r\n    \r\n    setPlant(prev => ({\r\n      ...prev,\r\n      status: newStatus\r\n    }));\r\n  };\r\n\r\n  // Function to record plant care actions\r\n  const recordCareAction = (action) => {\r\n    const now = new Date();\r\n    \r\n    setPlant(prev => ({\r\n      ...prev,\r\n      lastWatered: action === 'watered' ? now : prev.lastWatered,\r\n      streak: prev.streak + 1,\r\n      careHistory: [\r\n        { action, date: now },\r\n        ...prev.careHistory\r\n      ]\r\n    }));\r\n  };\r\n\r\n  // Function to add a new plant photo\r\n  const addPlantPhoto = (photoUrl, note = '') => {\r\n    const newPhoto = {\r\n      id: plant.photos.length + 1,\r\n      url: photoUrl,\r\n      date: new Date(),\r\n      note,\r\n    };\r\n    \r\n    setPlant(prev => ({\r\n      ...prev,\r\n      photos: [newPhoto, ...prev.photos]\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshPlantData();\r\n    \r\n    // Set up a refresh interval - in a real app, this might\r\n    // poll for updated sensor data\r\n    const interval = setInterval(() => {\r\n      refreshPlantData();\r\n    }, 60000); // Refresh every minute\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const value = {\r\n    plant,\r\n    loading,\r\n    error,\r\n    updatePlantStatus,\r\n    recordCareAction,\r\n    addPlantPhoto,\r\n    refreshPlantData,\r\n  };\r\n\r\n  return <PlantContext.Provider value={value}>{children}</PlantContext.Provider>;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}