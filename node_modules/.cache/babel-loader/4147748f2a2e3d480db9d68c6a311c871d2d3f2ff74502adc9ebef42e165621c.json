{"ast":null,"code":"// src/services/sensorService.js\n/**\r\n * Service for handling sensor data API requests\r\n */\n\nimport { fetchWithAuth } from './api';\n\n// Get latest sensor readings\nexport const fetchSensorData = async plantId => {\n  return fetchWithAuth(`/plants/${plantId}/sensors/current`);\n};\n\n// Get historical sensor data\nexport const fetchSensorHistory = async (plantId, options = {}) => {\n  const {\n    startDate,\n    endDate,\n    interval\n  } = options;\n  let url = `/plants/${plantId}/sensors/history`;\n\n  // Add query parameters if provided\n  const params = new URLSearchParams();\n  if (startDate) params.append('startDate', startDate.toISOString());\n  if (endDate) params.append('endDate', endDate.toISOString());\n  if (interval) params.append('interval', interval);\n  if (params.toString()) {\n    url += `?${params.toString()}`;\n  }\n  return fetchWithAuth(url);\n};\n\n// Calculate health metrics based on sensor data\nexport const calculateHealthMetrics = async plantId => {\n  return fetchWithAuth(`/plants/${plantId}/health-metrics`);\n};\n\n// Predict optimal care schedule\nexport const predictCareSchedule = async plantId => {\n  return fetchWithAuth(`/plants/${plantId}/care-predictions`);\n};\n\n// Get soil moisture depletion rate\nexport const getSoilMoistureDepletion = async plantId => {\n  return fetchWithAuth(`/plants/${plantId}/moisture-depletion`);\n};","map":{"version":3,"names":["fetchWithAuth","fetchSensorData","plantId","fetchSensorHistory","options","startDate","endDate","interval","url","params","URLSearchParams","append","toISOString","toString","calculateHealthMetrics","predictCareSchedule","getSoilMoistureDepletion"],"sources":["C:/Users/ilyal/OneDrive/Рабочий стол/בראודה/סמסטר 8/אקולוגיה/PlantTalk/src/services/sensorService.js"],"sourcesContent":["// src/services/sensorService.js\r\n/**\r\n * Service for handling sensor data API requests\r\n */\r\n\r\nimport { fetchWithAuth } from './api';\r\n\r\n// Get latest sensor readings\r\nexport const fetchSensorData = async (plantId) => {\r\n  return fetchWithAuth(`/plants/${plantId}/sensors/current`);\r\n};\r\n\r\n// Get historical sensor data\r\nexport const fetchSensorHistory = async (plantId, options = {}) => {\r\n  const { startDate, endDate, interval } = options;\r\n  let url = `/plants/${plantId}/sensors/history`;\r\n  \r\n  // Add query parameters if provided\r\n  const params = new URLSearchParams();\r\n  if (startDate) params.append('startDate', startDate.toISOString());\r\n  if (endDate) params.append('endDate', endDate.toISOString());\r\n  if (interval) params.append('interval', interval);\r\n  \r\n  if (params.toString()) {\r\n    url += `?${params.toString()}`;\r\n  }\r\n  \r\n  return fetchWithAuth(url);\r\n};\r\n\r\n// Calculate health metrics based on sensor data\r\nexport const calculateHealthMetrics = async (plantId) => {\r\n  return fetchWithAuth(`/plants/${plantId}/health-metrics`);\r\n};\r\n\r\n// Predict optimal care schedule\r\nexport const predictCareSchedule = async (plantId) => {\r\n  return fetchWithAuth(`/plants/${plantId}/care-predictions`);\r\n};\r\n\r\n// Get soil moisture depletion rate\r\nexport const getSoilMoistureDepletion = async (plantId) => {\r\n  return fetchWithAuth(`/plants/${plantId}/moisture-depletion`);\r\n};\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,aAAa,QAAQ,OAAO;;AAErC;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,OAAO,IAAK;EAChD,OAAOF,aAAa,CAAC,WAAWE,OAAO,kBAAkB,CAAC;AAC5D,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOD,OAAO,EAAEE,OAAO,GAAG,CAAC,CAAC,KAAK;EACjE,MAAM;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAS,CAAC,GAAGH,OAAO;EAChD,IAAII,GAAG,GAAG,WAAWN,OAAO,kBAAkB;;EAE9C;EACA,MAAMO,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EACpC,IAAIL,SAAS,EAAEI,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEN,SAAS,CAACO,WAAW,CAAC,CAAC,CAAC;EAClE,IAAIN,OAAO,EAAEG,MAAM,CAACE,MAAM,CAAC,SAAS,EAAEL,OAAO,CAACM,WAAW,CAAC,CAAC,CAAC;EAC5D,IAAIL,QAAQ,EAAEE,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEJ,QAAQ,CAAC;EAEjD,IAAIE,MAAM,CAACI,QAAQ,CAAC,CAAC,EAAE;IACrBL,GAAG,IAAI,IAAIC,MAAM,CAACI,QAAQ,CAAC,CAAC,EAAE;EAChC;EAEA,OAAOb,aAAa,CAACQ,GAAG,CAAC;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMM,sBAAsB,GAAG,MAAOZ,OAAO,IAAK;EACvD,OAAOF,aAAa,CAAC,WAAWE,OAAO,iBAAiB,CAAC;AAC3D,CAAC;;AAED;AACA,OAAO,MAAMa,mBAAmB,GAAG,MAAOb,OAAO,IAAK;EACpD,OAAOF,aAAa,CAAC,WAAWE,OAAO,mBAAmB,CAAC;AAC7D,CAAC;;AAED;AACA,OAAO,MAAMc,wBAAwB,GAAG,MAAOd,OAAO,IAAK;EACzD,OAAOF,aAAa,CAAC,WAAWE,OAAO,qBAAqB,CAAC;AAC/D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}